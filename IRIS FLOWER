import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

# LOADING THE DATASET

iris = pd.read_csv('/content/drive/MyDrive/iris flower/IRIS.csv')
iris.head()

iris= iris.rename(columns={'SepalLengthCm':'Sepal_Length',
                           'SepalWidthCm':'Sepal_Width',
                           'PetalLengthCm':'Petal_Length',
                           'PetalWidthCm':'Petal_Width'})

iris.head()

iris.isnull().sum()

iris ['species'].value_counts()

iris.describe()

# VISUALISATION

**SCATTER PLOT**

sns.FacetGrid(iris, hue="species",height=6).map(plt.scatter,"petal_length","sepal_width").add_legend()

**PAIRPLOT**

sns.pairplot(iris[['sepal_length','sepal_width','petal_length','petal_width','species']], hue="species",diag_kind='kde')

# SEPERATING INPUT AND OUTPUT COLUMNS

data=iris.values

# slicing the matrices
X=data[:,0:4]
Y=data[:,4]

print(X.shape)
print(X)

print(Y.shape)
print(Y)

# SPLITING DATA INTO TESTING AND 

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X,Y, test_size=0.2)

print(X_train.shape)
print(X_train)

print(y_test.shape)
print(y_test)

print(X_test.shape)
print(X_test)

print(y_train.shape)
print(y_train)

# MODEL 1: SUPPORT VECTOR MACHINE ALGORITHM

from sklearn.svm import SVC

model_svc=SVC()
model_svc.fit(X_train,y_train)

prediction1 = model_svc.predict(X_test)

#calculate the accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, prediction1))

# MODEL 2: LOGISTIC REGRESSION

flower_mapping = {'iris-setosa':0,'iris-versicolor':1,'iris-virginica':2}
iris['species']=iris['species'].map(flower_mapping)

iris.head()

iris.tail()

X=iris [['sepal_length','sepal_width','petal_length','petal_width']].values
y= iris[['species']].values

from sklearn.linear_model import LogisticRegression
model= LogisticRegression()
model.fit(X,Y)

model.score(X,Y)

expected = Y
predicted = model.predict(X)
predicted

from sklearn import metrics

print(metrics.classification_report(expected, predicted))

print(metrics.confusion_matrix(expected, predicted))

# MODEL3: DECISION TREE CLASSIFIER

from sklearn.tree import DecisionTreeClassifier
model_DTC = DecisionTreeClassifier()
model_DTC.fit(X_train, y_train)

prediction3= model_svc.predict(X_test)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, prediction3))

# New data for prediction

# New data for prediction
X_new = np.array([[3, 2, 1, 0.2], [4.9, 2.2, 3.8, 1.1], [5.3, 2.5, 4.6, 1.9]])

# Predicting the sizes of the iris flowers
predicted_sizes = model.predict(X_new)

# Output the predicted sizes
print(predicted_sizes)
