import numpy as np
import pandas as pd
import sklearn
import scipy
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, accuracy_score
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.metrics import f1_score,precision_score, recall_score
from sklearn.svm import OneClassSVM
from pylab import rcParams
rcParams['figure.figsize']=14, 8
RANDOM_SEED = 42
LABELS = ["Normal", "Fraud"]

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/ccfd/creditcard.csv', sep=',')
data.head()

data.info()

# **EXPLARATORY DATA ANALYSIS**

data.isnull().values.any()

import pandas as pd
count_classes = pd.value_counts(data['Class'], sort = True)
count_classes.plot(kind = 'bar', rot=0)
plt.title("Transaction Class Distribution")
plt.xticks(range(2), LABELS)
plt.xlabel("Class")
plt.ylabel("Frequency")

fraud = data[data['Class']==1]
normal = data[data['Class']==0]

print(fraud.shape,normal.shape)

## to analyze more amount of information from the transaction data
fraud.Amount.describe()

normal.Amount.describe()

f, (ax1, ax2) = plt.subplots(2,1, sharex=True)
f.suptitle('Amount per transaction by class')
bins = 50
ax1.hist(fraud.Amount, bins = bins)
ax1.set_title('Fraud')
ax2.hist(normal.Amount,bins = bins)
ax2.set_title('Normal')
plt.xlabel('Amount ($)')
plt.ylabel('Transactions')
plt.xlim((0,20000))
plt.yscale('log')
plt.show

f, (ax1,ax2)=plt.subplots(2,1,sharex=True)
f.suptitle('Time of transaction vs amount by Class')
ax1.scatter(fraud.Time, fraud.Amount)
ax1.set_title('Number of Fraud')
ax2.scatter(normal.Time, normal.Amount)
ax2.set_title('Normal Transaction')
plt.xlabel('Time (in  s)')
plt.ylabel('Amount')
plt.show

dataset = data.sample(frac=0.1,random_state=1)
dataset.shape

data.shape

Fraud = dataset[dataset['Class']==1]
Valid = dataset[dataset['Class']==0]
outlier_fraction = len(Fraud)/float(len(Valid))

print(outlier_fraction)
print("Fraud Cases : {}".format(len(Fraud)))
print("Valid cases : {}".format(len(Valid)))

import seaborn as sns
corrmat = dataset.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(20,20))
w=sns.heatmap(dataset[top_corr_features].corr(),annot=True,cmap="RdYlGn")

columns = dataset.columns.tolist()
columns = [c for c in columns if c not in ["Class"]]
target = "Class"
state = np.random.RandomState(42)
X = dataset[columns]
Y = dataset[target]
X_outliers = state.uniform(low=0,high=1, size=(X.shape[0],X.shape[1]))
print(X.shape)
print(Y.shape)

# MODEL PREDICTION

classifiers = {
    "Isolation Forest": IsolationForest(n_estimators=100, max_samples=len(X),
                                        contamination=outlier_fraction,random_state=state, verbose=0),
    "Local Outlier Factor":LocalOutlierFactor(n_neighbors=20,algorithm='auto',
                                              leaf_size=30,metric='minkowski',
                                              p=2,metric_params=None, contamination=outlier_fraction),
    "Support Vector Machine":OneClassSVM (kernel='rbf', degree=3, gamma=0.1, nu=0.05,
                                         max_iter=-1)
    }

type(classifiers)

n_outliers=len(Fraud)
for i, (clf_name,clf) in enumerate(classifiers.items()):
  if clf_name == "Local Outlier factor":
    y_pred = clf.fit_predict(X)
    score_prediction = clf.negative_outlier_factor_
  elif clf_name == "Support Vector Machine":
      clf.fit(X)
      y_pred = clf.predict(X)
  else:
        clf.fit(X)
  if hasattr(clf, 'decision_function'):
        scores_prediction = clf.decision_function(X)
        y_pred = clf.predict(X)
        y_pred[y_pred == 1] = 0
        y_pred[y_pred == -1] =1
        n_errors = (y_pred !=Y).sum()
        print("{}:{}".format(clf_name,n_errors))
        print("Accuracy Value:")
        print(accuracy_score(Y,y_pred))
        print("Classifiers Report:")
        print(classification_report(Y,y_pred))
